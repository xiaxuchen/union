//应用于gradle 编译
buildscript {
    //定义
    ext {
        springBootVersion = "2.0.5.RELEASE"
    }
    repositories {
        repositories {
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        }
        //maven 中央仓库
        mavenCentral()
    }

    dependencies {
        // 指定gradle spring boot plugin 版本 用于spring boot 版本依赖控制
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 所有子项目的通用配置
subprojects {

    //指定中央仓库 项目使用
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        //maven 中央仓库
        mavenCentral()
    }

    //应用插件
    apply plugin: 'java'

    apply plugin: 'org.springframework.boot'

    //用于spring boot 版本jar依赖
    apply plugin: 'io.spring.dependency-management'

    //指定jdk版本
    sourceCompatibility = 1.8

    //设置group id
    group 'com.originit'

    //设置版本
    version '1.0.0'

    //依赖
    dependencies {
        testCompile('org.springframework.boot:spring-boot-starter-test')
        compile('org.springframework.boot:spring-boot-starter')
        compile('org.springframework.boot:spring-boot-starter-web')
        implementation "org.springframework.boot:spring-boot-starter-aop"
        annotationProcessor 'org.projectlombok:lombok:1.18.2'

        compileOnly 'org.projectlombok:lombok:1.18.2'
        //quartz依赖
        implementation "org.springframework.boot:spring-boot-starter-quartz"

    }

    //这里一定得要。在多模块下，不然编译失败，因为不会把信赖模块给打包。
    jar {
        enabled = true
    }
}

this.afterEvaluate {
    subprojects.each {Project pro ->
        pro.tasks.getByName('clean').doLast {
            file(pro.getProjectDir().absolutePath + '/out').deleteDir()
        }
    }
}
